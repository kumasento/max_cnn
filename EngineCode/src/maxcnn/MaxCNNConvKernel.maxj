package maxcnn;

import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class MaxCNNConvKernel extends Kernel {

  private static final DFEType type = dfeInt(32);

  protected MaxCNNConvKernel(KernelParameters parameters, int H, int W, int K) {
		super(parameters);

		// input image stream
		DFEVar image = io.input("image", type);
		
		// coefficients
		DFEVectorType<DFEVar> coeffType = new DFEVectorType<DFEVar>(type, K * K);
		DFEVector<DFEVar> coeff = coeffType.newInstance(this);
		// use scalar to update coefficients
		for (int i = 0; i < K * K; i ++)
		  coeff[i] <== io.scalarInput(String.format("coeff_%d", i), type);
		
		// create counter chain to create 2 nested counters:
	    // h for the index in height of the current pixel, and w in width
	    CounterChain chain = control.count.makeCounterChain();
	    DFEVar h = chain.addCounter(H, 1);
	    DFEVar w = chain.addCounter(W, 1);

	    // window is the K x K number of elements to be computed with
	    // the kernel filter (coeff)
	    // we use stream offset to locate corresponding elements in
	    // the input stream (image)
	    DFEVectorType<DFEVar> windowType = new DFEVectorType<DFEVar>(type, K * K);
	    DFEVector<DFEVar> window = windowType.newInstance(this);
	    for (int i = 0; i < K; i ++)
	      for (int j = 0; j < K; j ++)
	        window[i * K + j] <== stream.offset(image, -((K-i-1) * W + (K-j-1)));
	    
	    // then return the dot-product result.
	    DFEVar output = dotprod(window, coeff);
	    DFEVar outputValid = h >= K - 1 & w >= K - 1;
	    // debug.simPrintf("Output: %d, Output Valid: %d", output, outputValid);
	    io.output("convOut", output, type, outputValid);
	}

  private DFEVar dotprod(DFEVector<DFEVar> a, DFEVector<DFEVar> b) {
    return reduceAdd((a * b).getElementsAsList());
  }

  private DFEVar reduceAdd(List<DFEVar> v) {
    if (v.size() == 1)
      return v.get(0);
    if (v.size() == 2)
      return v.get(0) + v.get(1);
    int N = v.size() / 2;
    return reduceAdd(v.subList(0, N)) + reduceAdd(v.subList(N, v.size()));
  }

}
